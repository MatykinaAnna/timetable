{"ast":null,"code":"import _asyncToGenerator from \"/Users/anna/Documents/timetable/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.url = 'https://timetable-4b073-default-rtdb.firebaseio.com';\n  }\n\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  idLoggetIn() {\n    return this.getToken() !== null;\n  }\n\n  login(userInfo) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let info;\n      yield _this.http.get(`${_this.url}/admin.json`).subscribe(data => {\n        info = data;\n      });\n\n      if (userInfo.email == 'admin@gmail.com' && userInfo.password == 'admin123') {\n        _this.setToken('ycjfcjty6768fvgvhgrd6');\n\n        return of(true);\n      }\n\n      return throwError(() => new Error('Failed Loggin'));\n    })();\n  }\n\n  logout() {\n    this.router.navigate(['login']);\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/anna/Documents/timetable/src/app/services/auth.service.ts"],"names":["of","throwError","i0","i1","i2","AuthService","constructor","router","http","url","setToken","token","localStorage","setItem","getToken","getItem","idLoggetIn","login","userInfo","info","get","subscribe","data","email","password","Error","logout","navigate","ɵfac","AuthService_Factory","t","ɵɵinject","Router","HttpClient","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":";AAAA,SAASA,EAAT,EAAaC,UAAb,QAA+B,MAA/B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;AACtB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAW,qDAAX;AACH;;AACDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,KAA9B;AACH;;AACDG,EAAAA,QAAQ,GAAG;AACP,WAAOF,YAAY,CAACG,OAAb,CAAqB,OAArB,CAAP;AACH;;AACDC,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKF,QAAL,OAAoB,IAA3B;AACH;;AACKG,EAAAA,KAAK,CAACC,QAAD,EAAW;AAAA;;AAAA;AAClB,UAAIC,IAAJ;AACA,YAAM,KAAI,CAACX,IAAL,CAAUY,GAAV,CAAe,GAAE,KAAI,CAACX,GAAI,aAA1B,EACDY,SADC,CACUC,IAAD,IAAU;AACrBH,QAAAA,IAAI,GAAGG,IAAP;AACH,OAHK,CAAN;;AAIA,UAAIJ,QAAQ,CAACK,KAAT,IAAkB,iBAAlB,IACGL,QAAQ,CAACM,QAAT,IAAqB,UAD5B,EACwC;AACpC,QAAA,KAAI,CAACd,QAAL,CAAc,uBAAd;;AACA,eAAOV,EAAE,CAAC,IAAD,CAAT;AACH;;AACD,aAAOC,UAAU,CAAC,MAAM,IAAIwB,KAAJ,CAAU,eAAV,CAAP,CAAjB;AAXkB;AAYrB;;AACDC,EAAAA,MAAM,GAAG;AACL,SAAKnB,MAAL,CAAYoB,QAAZ,CAAqB,CAAC,OAAD,CAArB;AACH;;AA9BoB;;AAgCzBtB,WAAW,CAACuB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIzB,WAAV,EAAuBH,EAAE,CAAC6B,QAAH,CAAY5B,EAAE,CAAC6B,MAAf,CAAvB,EAA+C9B,EAAE,CAAC6B,QAAH,CAAY3B,EAAE,CAAC6B,UAAf,CAA/C,CAAP;AAAoF,CAAzI;;AACA5B,WAAW,CAAC6B,KAAZ,GAAoB,aAAchC,EAAE,CAACiC,kBAAH,CAAsB;AAAExB,EAAAA,KAAK,EAAEN,WAAT;AAAsB+B,EAAAA,OAAO,EAAE/B,WAAW,CAACuB,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class AuthService {\n    constructor(router, http) {\n        this.router = router;\n        this.http = http;\n        this.url = 'https://timetable-4b073-default-rtdb.firebaseio.com';\n    }\n    setToken(token) {\n        localStorage.setItem('token', token);\n    }\n    getToken() {\n        return localStorage.getItem('token');\n    }\n    idLoggetIn() {\n        return this.getToken() !== null;\n    }\n    async login(userInfo) {\n        let info;\n        await this.http.get(`${this.url}/admin.json`)\n            .subscribe((data) => {\n            info = data;\n        });\n        if (userInfo.email == 'admin@gmail.com'\n            && userInfo.password == 'admin123') {\n            this.setToken('ycjfcjty6768fvgvhgrd6');\n            return of(true);\n        }\n        return throwError(() => new Error('Failed Loggin'));\n    }\n    logout() {\n        this.router.navigate(['login']);\n    }\n}\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient)); };\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}